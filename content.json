{"meta":{"title":"$ cat life.log|","subtitle":"","description":"","author":"antisamael","url":"http://yoursite.com","root":"/"},"pages":[{"title":"categories","date":"2022-02-10T20:16:12.000Z","updated":"2022-02-10T20:18:10.413Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2022-02-10T19:57:36.607Z","updated":"2022-02-10T19:57:36.607Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"联想SP8平板刷机","slug":"联想SP8平板刷机","date":"2022-03-05T19:02:32.000Z","updated":"2022-03-05T19:10:58.440Z","comments":true,"path":"2022/03/06/联想SP8平板刷机/","link":"","permalink":"http://yoursite.com/2022/03/06/%E8%81%94%E6%83%B3SP8%E5%B9%B3%E6%9D%BF%E5%88%B7%E6%9C%BA/","excerpt":"","text":"线刷 TWRP 下载并安装驱动，两个都装上 LenovoUsbDriver_autorun_1.0.16.exe Qualcomm_Diag_QD_Loader_2016_driver.exe 下载 TWRP-3.2.3-0308-LENOVO_P8(8703F)-CN-wzsx150-QPST.7z，解压，一会要用 下载并安装线刷工具 QPST，安装好后打开它 按住平板的音量上，用USB连接电脑 QFIL（QPST）会提醒选择端口，选择9008端口，然后： Build Type：选 Flat Build Programmer：选择刚解压的 TWRP 文件夹中的 prog_emmc_firehose_8953_ddr.mbn Download：点击 Load XML ，依次选 TWRP 文件夹中的 rawprogram0.xml 和 patch0.xml 点击 Download 最后 Status 中应看见成功（英文）字样 卡刷指定 TWRP安装非官方系统必须使用文件名为 twrp-tb8703-3.2.1-20180825-bootsign.img 的 TWRP，其他 TWRP 均无法正常启动，在 QFIL 中操作完毕后，如果没有单独改设置为刷完自动重启的话，此时设备应仍处于 9008模式。 下载 twrp-tb8703-3.2.1-20180825-bootsign.img，然后放入 SP8 的内存卡中 断开电脑与SP8的连接，长按音量上和开机键强制关机后直接开机进入REC 卡刷 twrp-tb8703-3.2.1-20180825-bootsign.img 到 REC 重启重新进入 REC，后面就可以刷其他 ROM 了，我刷的是 Lineage 17","categories":[],"tags":[{"name":"奇技淫巧","slug":"奇技淫巧","permalink":"http://yoursite.com/tags/%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/"}]},{"title":"DeDRM Kindle 电子书","slug":"DeDRM-Kindle-电子书","date":"2022-01-28T17:53:55.000Z","updated":"2022-02-22T14:32:56.916Z","comments":true,"path":"2022/01/29/DeDRM-Kindle-电子书/","link":"","permalink":"http://yoursite.com/2022/01/29/DeDRM-Kindle-%E7%94%B5%E5%AD%90%E4%B9%A6/","excerpt":"","text":"准备工具： Calibre DeDRM插件 noDRM&#x2F;DeDRM_tools（目前还在更新的 fork） Calibre 安装 DeDRM 插件 解压 DeDRM_tools_xxx.zip 文件，找到 DeDRM_Plugin.zip 打开 Calibre &gt; 首选项 &gt; 插件 &gt; 从文件加载插件(L) 选择 DeDRM_Plugin.zip （注意不是 DeDRM_tools_xxx.zip） 配置 DeDRM 插件 查找 Kindle 序列号：登录亚马逊账号 &gt; 我的账户 &gt; 管理我的内容和设备 &gt; 我的设备 打开 Calibre 插件页面，查找 DeDRM 插件，双击进入配置界面，点击 eInk Kindle ebooks，填入序列号 使用 从亚马逊或其他渠道下载 Kindle 电子书（asw3 格式） 直接将 asw3 文件拖入 Calibre，即可自动解锁","categories":[],"tags":[{"name":"奇技淫巧","slug":"奇技淫巧","permalink":"http://yoursite.com/tags/%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/"}]},{"title":"Markdown 扩展语法","slug":"Markdown-扩展语法","date":"2020-06-29T17:32:15.000Z","updated":"2022-01-29T08:23:51.830Z","comments":true,"path":"2020/06/30/Markdown-扩展语法/","link":"","permalink":"http://yoursite.com/2020/06/30/Markdown-%E6%89%A9%E5%B1%95%E8%AF%AD%E6%B3%95/","excerpt":"Markdown 的一些很实用的扩展语法，并非所有 Markdown 编辑器都能支持，比如在笔者写这篇文章时，VSCode 还不支持上标下标但支持注脚和锚的跳转，Typora 支持上标下标但不支持注脚和锚跳转。如果都都支持，就是比较强的 Markdown 编辑器了，比如说 Joplin。","text":"Markdown 的一些很实用的扩展语法，并非所有 Markdown 编辑器都能支持，比如在笔者写这篇文章时，VSCode 还不支持上标下标但支持注脚和锚的跳转，Typora 支持上标下标但不支持注脚和锚跳转。如果都都支持，就是比较强的 Markdown 编辑器了，比如说 Joplin。 高亮把文本价在一对 == 之间就可以高亮文本了，高亮很多编辑器支持的，但它其实是扩展语法，还是有部分编辑器不支持的，比如 VSCode Markdown 代码 Markdown 显示 ==需要高亮的文本== &#x3D;&#x3D;需要高亮的文本&#x3D;&#x3D; 在表格中换行在需要换行的地方，插入 &lt;br&gt; 即可 Markdown 代码 Markdown 显示 大道至简&lt;br&gt;知易行难 大道至简知易行难 上标和下标 Markdown 代码 Markdown 显示 2^8^ 2^8^ H~2~O H2O 有的编辑器会把下标的写法解释成删除线……比如 Jupyter，但一般来说使用一对 ~~ 夹住的文本才是删除线语法，而不应该是一对 ~,不应该被删除才对 注脚 Markdown 代码 Markdown 显示 正文 草[^1] 草[^1] 注脚 [^1]:草：一种植物 写在表格里就没有效果了，于是写在下面了 注脚 VSCode 和 Joplin 做的很好，无论你将注脚写在正文后哪里，显示的注脚都是放在文末的，点击注脚，还能方便的跳转； 而 Typora 就不太让人满意了，要自行放在文末，还不支持跳转，但是鼠标悬浮在注脚上时，有气泡内容显示注释，如果注释文本较长的话也不太方便。 锚跳转到页脚 Emoji:smile: CheckBox item1 item2 数学公式$$\\frac{x+y}{y+z}$$ 我是页脚","categories":[],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://yoursite.com/tags/Markdown/"}]},{"title":"Regex 速查表和常用技巧总结","slug":"Regex速查表和常用技巧总结","date":"2020-06-22T16:17:09.000Z","updated":"2022-01-29T08:24:39.827Z","comments":true,"path":"2020/06/23/Regex速查表和常用技巧总结/","link":"","permalink":"http://yoursite.com/2020/06/23/Regex%E9%80%9F%E6%9F%A5%E8%A1%A8%E5%92%8C%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/","excerpt":"元字符 代码 说明 . 除换行符外任意一个字符 \\w 匹配字母或数字或下划线或汉字 \\s 匹配任意的空白符 \\d 匹配数字 \\b 匹配单词的开始或结束 ^ 匹配字符串的开始 $ 匹配字符串的结束","text":"元字符 代码 说明 . 除换行符外任意一个字符 \\w 匹配字母或数字或下划线或汉字 \\s 匹配任意的空白符 \\d 匹配数字 \\b 匹配单词的开始或结束 ^ 匹配字符串的开始 $ 匹配字符串的结束 限定符（指定重复）限定符是一种特殊的元字符，用于指定它前面的表达式的重复次数 代码&#x2F;语法 说明 * 重复零次或更多次 + 重复一次或更多次 ? 重复零次或一次 {n} 重复n次 {n,} 重复n次或更多次 {n,m} 重复n到m次 字符类（字符集合）使用方括号 [] 框起来可以匹配字符的集合，比如： [aeiou] 匹配任何一个元音字母 还有一些常用的有： [a-b][1-9][0-26-9] 匹配 0 到 2 和 6 到 9 中的任意数字 分枝条件（或）使用 | 分隔不同的表达式，满足任意一种规则都可以认为匹配 反义将元字符大写或者前面加上^来表示反义： 代码&#x2F;语法 说明 \\W 匹配任意不是字母，数字，下划线，汉字的字符 \\S 匹配任意不是空白符的字符 \\D 匹配任意非数字的字符 \\B 匹配不是单词开头或结束的位置 [^x] 匹配除了x以外的任意字符 [^aeiou] 匹配除了aeiou这几个字母以外的任意字符 例子：&lt;a[^&gt;]+&gt; 匹配用尖括号括起来的以a开头的字符串。[^1-3] 不匹配 1~3 的数字 贪婪和懒惰当表达式中带有指定重复的限定符时，如：a\\w+b ，正则表达式默认为贪婪匹配，即匹配尽可能多的字符如 aabababab 使用上面的表达式会匹配整个字符串。如果我们只需要匹配第一次出现的符合表达式的字符串，则可以使用懒惰匹配使用懒惰匹配的方法是，在限定符后面加上问号 ?，如：a\\w+?b，则返回的是 aab 和 ab 分组&#x2F;子表达式用小括号来指定子表达式(也叫做分组)，可以用来重复多个字符比如 IP 的简单例子（这个表达式不准确，可能匹配到非法的 IP）： (\\d&#123;1,3&#125;\\.)&#123;3&#125;\\d&#123;1,3&#125; 后向引用指定子表达式（分组）后，每个分组为默认分配一个组号，分组0 为整个正则表达式，其他则以左括号为标志，从1开始为分组编号然后使用 \\分组号 就可以引用那个分组所捕获到的字符串了，举个例子： ^My name is (\\w+); Hello, \\1$ 匹配：My name is Aki; Hello, Aki （Aki 可以更换为任意单词） 常用的分组语法有： 分类 代码&#x2F;语法 说明 捕获 (exp) 匹配 exp,并捕获文本到自动命名的组里 (?exp) 匹配 exp,并捕获文本到名称为name的组里也可以写成 (?’name’exp) (?:exp) 匹配 exp,不捕获匹配的文本，也不给此分组分配组号 零宽断言 (?&#x3D;exp) 零宽度正预测先行断言匹配 exp 前面的位置 (?&lt;&#x3D;exp) 零宽度正回顾后发断言匹配 exp 后面的位置 (?!exp) 零宽度负预测先行断言匹配后面跟的不是 exp 的位置 (?&lt;!exp) 零宽度负回顾后发断言匹配前面不是 exp 的位置 注释 (?#comment) 提供注释让人阅读","categories":[],"tags":[{"name":"Regex","slug":"Regex","permalink":"http://yoursite.com/tags/Regex/"},{"name":"正则表达式","slug":"正则表达式","permalink":"http://yoursite.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"},{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"}]},{"title":"配置好用又个性的 Windows Terminal","slug":"配置好用又个性的-Windows-Terminal","date":"2020-05-20T15:58:55.000Z","updated":"2022-01-29T08:25:00.043Z","comments":true,"path":"2020/05/20/配置好用又个性的-Windows-Terminal/","link":"","permalink":"http://yoursite.com/2020/05/20/%E9%85%8D%E7%BD%AE%E5%A5%BD%E7%94%A8%E5%8F%88%E4%B8%AA%E6%80%A7%E7%9A%84-Windows-Terminal/","excerpt":"Windows Terminal 1.0 发布了，用了一段时间的预览版，还不错，记录和分享一下它的配置了。","text":"Windows Terminal 1.0 发布了，用了一段时间的预览版，还不错，记录和分享一下它的配置了。 安装WT 项目的源码目前在 GitHub 上，地址是：https://github.com/microsoft/terminal官方推荐的安装方式是从 Microsoft Store 上安装，也可以使用 Chocolatey 安装，如果想要在不支持外网的工作PC使用，因为目前没有安装包，只能下载源码编译了，详细方法先留个坑，后面再发文介绍。 安装好以后，第一印象是：终于官方支持多标签页的终端了！然后还支持不同的入口，除了默认的 Cmd 和 Powershell，通过修改配置，还支持快速进入 WSL 和 VPS……支持设置背景和背景透明度，可以大大提升 WT 的颜值，作为非运维人员也不需要太多功能，所以我已经把 MobaXterm 和 XShell 给丢冷板凳了。 配置 &#x2F; 个性化按 Ctrl + , 打开WT的配置文件，WT 的配置文件是由json编写的，分为 4 个分，一个是全局配置，另外 3 个分别配置 WT 的入口、主题、快捷键；下面各个介绍一下： 全局配置中常用的配置项大致就这么几个： defaultProfile: 打开 WT 后默认的入口 guid requestedTheme: 适配亮&#x2F;暗主题，我是设置为 “system” 跟随系统了 copyOnSelect: 选中文字后自动复制，建议设置为 true 入口的配置： 这里分享一下我的 Powershell 的配置 &#123; // Make changes here to the powershell.exe profile &quot;guid&quot;: &quot;&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;&quot;, &quot;name&quot;: &quot;Windows PowerShell&quot;, &quot;commandline&quot;: &quot;powershell.exe&quot;, &quot;hidden&quot;: false, &quot;fontFace&quot;: &quot;Sarasa Mono T SC&quot;, &quot;fontSize&quot;:11, &quot;backgroundImage&quot;:&quot;D:/OneDrive/Pictures/Wallpaper/winx/Untitled Goose Wallpaper.png&quot;, &quot;backgroundImageStretchMode&quot;: &quot;uniformToFill&quot;, &quot;backgroundImageOpacity&quot;: 0.6, &quot;colorScheme&quot;:&quot;One Half Dark&quot;&#125;, 还有 VPS 的： &#123; &quot;guid&quot;: &quot;&#123;a9fc51e9-101f-4548-aad9-3d9e7a934801&#125;&quot;, &quot;hidden&quot;: false, &quot;name&quot;: &quot;Bandwagon VPS&quot;, &quot;commandline&quot;: &quot;powershell.exe ssh -p xxxxx root@xxx.xxx.xxx.xxx&quot;, &quot;fontFace&quot;: &quot;Sarasa Mono T SC&quot;, &quot;fontSize&quot;:11, &quot;useAcrylic&quot;:true, &quot;acrylicOpacity&quot;:1, &quot;icon&quot;:&quot;D:\\\\OneDrive\\\\Pictures\\\\Icon\\\\icons8-centos-48.png&quot;, &quot;colorScheme&quot;:&quot;Gruvbox Dark&quot;&#125; 唯一的GUID可以通过网站在线生成 配色方案： iTerm2 的代码仓中有为 WT 配置好的配色方案，我们将方案复制到我们的配置文件中即可。 增强pshazz 我的 WT 配置","categories":[],"tags":[{"name":"Tool","slug":"Tool","permalink":"http://yoursite.com/tags/Tool/"}]},{"title":"使用Pandas处理Excel的常用操作","slug":"使用Pandas处理Excel的常用操作","date":"2020-05-16T14:47:35.000Z","updated":"2022-02-02T12:55:04.239Z","comments":true,"path":"2020/05/16/使用Pandas处理Excel的常用操作/","link":"","permalink":"http://yoursite.com/2020/05/16/%E4%BD%BF%E7%94%A8Pandas%E5%A4%84%E7%90%86Excel%E7%9A%84%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/","excerpt":"读取 Excel 文件读取 Excel 文件的方法是 read_excel() import pandas as pdfd = pd.read_excel(&#x27;Workbook.xlsx&#x27;)print(fd) 第一个参数填写 Excel 文件的路径，第二个参数填写需要打开的标签页；第二个参数如果不填，则默认打开第一个标签页；下面的脚本是读取 Sheet2 标签页。 fd = pd.read_excel(&#x27;Workbook.xlsx&#x27;, &#x27;Sheet2&#x27;)","text":"读取 Excel 文件读取 Excel 文件的方法是 read_excel() import pandas as pdfd = pd.read_excel(&#x27;Workbook.xlsx&#x27;)print(fd) 第一个参数填写 Excel 文件的路径，第二个参数填写需要打开的标签页；第二个参数如果不填，则默认打开第一个标签页；下面的脚本是读取 Sheet2 标签页。 fd = pd.read_excel(&#x27;Workbook.xlsx&#x27;, &#x27;Sheet2&#x27;) 保存 Excel 文件保存 Excel 文件的方法方式 to_excel() fd.to_excel(&quot;Workbook_copy.xlsx&quot;) 需要注意的是，保存的excel是不带样式的，所以我一般只用它来做测试查看结果是否符合预期，要输出可以交付的文档的时候，一般使用都是先使用 pandas 得到想要的结果后，再使用 openpyxl 保存。 默认的保存方式得到的 Excel 表格是带有 index （可以简单理解为原始数据的行号，不过是以 0 开头）和 header （可以理解为列标题），如果不需要它们，将参数 index 和 header 设置为 False 即可； 保存后默认标签页名称是 「Sheet1」，可以使用 sheet_name 参数来指定标签页名称； 对于 NaN 数据，默认是使用空字符串来保存的，如果需要修改为其他字符串，如 「–」，可以使用 na_rep 来修改。 fd.to_excel(&#x27;Workbook_copy.xlsx&#x27;, sheet_name=&quot;foo&quot;, index=None, header=None, na_rep=&#x27;--&#x27;) 读取单元格内容使用 loc 和 iloc 方法可以得到单元格的内容， loc 是基于列标签（或者说列标题）， iloc 基于列索引（表示从 0 开始数的第几列）。 比如如下代码读取第 3 行第 1 列的单元格内容 fd.loc[3,[&#x27;列1&#x27;]] # orfd.iloc[3, 0] 读取一行所有内容,并将值以 list 的形式返回 fd.loc(1, :).to_list() # loc 改成 iloc 也行 读取一列所有内容,并将值以 list 的形式返回 fd[&#x27;列1&#x27;].to_list() # 通常的做法fd.loc(:, [&#x27;列1&#x27;]).to_list() # 也可以这么做fd.iloc(:, 0).to_list() # iloc 方法 读取多行多列 fd.loc[[1, 3, 5], [&#x27;列1&#x27;, &#x27;列2&#x27;]] # orfd.iloc[[1, 3, 5], [0, 1]] 列的连接将 A 列的值和 B 列 的值连接起来合成一个新列： fd[&#x27;A&amp;B&#x27;] = fd[&#x27;A&#x27;].map(str) + fd[&#x27;B&#x27;].map(str) 筛选比如我们的表格中有一列的索引名称为 「是否安装」，想选取值为 N 的数据： data_y = data[data[&#x27;是否安装&#x27;] == &#x27;N&#x27;] 使用 &amp; 和 | 可以使用更多的筛选条件，比如： data_y = data[(data[&#x27;是否安装&#x27;] == &#x27;Y&#x27;) &amp; (data[&#x27;用途&#x27;] == &#x27;效率&#x27;)] 对于更复杂的筛选条件，使用 apply ，先用简单的例子来说明一下，还是选取列标题「是否安装」为 N 的数据，用 apply 来实现的话： def IsInstalled(val): return val == &#x27;Ndata_y = data[data[&#x27;是否安装&#x27;].apply(IsInstalled)] apply 可以带有参数，更为灵活： def IsInstalledArgs(val, is_install): return val == is_installdata_y = data[data[&#x27;是否安装&#x27;].apply(IsInstalledArgs, args=(&#x27;N&#x27;,))] 修改直接修改单元格的内容 df.loc[3, &#x27;列标签&#x27;] = &#x27;一个新值&#x27; 修改列标题 df.rename(columns=&#123;&#x27;A&#x27;:&#x27;AA&#x27;,&#x27;B&#x27;:&#x27;BB&#x27;&#125;, inplace=True) 合并 DataFrame使用 concat 简单的将 DataFrame 拼接到一起，不处理重复数据： df = pd.concat([df_A, df_B], axis=1) axis 为 0 是表示行拼接，为 1 时表示列拼接。 使用 merge 可以将 DataFrame 合并到一起，用它可以实现 Excel 的 VLOOKUP，比如：以 index 为 key，在 df1 中 查找 df2 的 name 的值合并。 等价于 VLOOKUP(index, df1:df2, 2, 0) result = pd.merge(df1, df2.loc[:,[&#x27;index&#x27;,&#x27;name&#x27;]], how=&#x27;left&#x27;, on = &#x27;index&#x27;)","categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"},{"name":"Pandas","slug":"Pandas","permalink":"http://yoursite.com/tags/Pandas/"}]},{"title":"Hello World","slug":"hello-world","date":"2020-03-20T17:19:56.000Z","updated":"2020-03-23T16:16:01.334Z","comments":true,"path":"2020/03/21/hello-world/","link":"","permalink":"http://yoursite.com/2020/03/21/hello-world/","excerpt":"","text":"你好，这是我的第一篇个人博客，主要记录一些软件工程，编码的心得，还有相关工具使用方法。 #include &lt;iostream&gt;using namespace std;int main()&#123; cout &lt;&lt; &quot;Hello,world!&quot; &lt;&lt; endl; return 0;&#125;","categories":[],"tags":[{"name":"misc","slug":"misc","permalink":"http://yoursite.com/tags/misc/"}]}],"categories":[],"tags":[{"name":"奇技淫巧","slug":"奇技淫巧","permalink":"http://yoursite.com/tags/%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/"},{"name":"Markdown","slug":"Markdown","permalink":"http://yoursite.com/tags/Markdown/"},{"name":"Regex","slug":"Regex","permalink":"http://yoursite.com/tags/Regex/"},{"name":"正则表达式","slug":"正则表达式","permalink":"http://yoursite.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"},{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"},{"name":"Tool","slug":"Tool","permalink":"http://yoursite.com/tags/Tool/"},{"name":"Pandas","slug":"Pandas","permalink":"http://yoursite.com/tags/Pandas/"},{"name":"misc","slug":"misc","permalink":"http://yoursite.com/tags/misc/"}]}