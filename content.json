{"meta":{"title":"Coding Life.log","subtitle":">_","description":"","author":"antisamael","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"配置好用又个性的 Windows Terminal","slug":"配置好用又个性的-Windows-Terminal","date":"2020-05-20T15:58:55.000Z","updated":"2020-05-20T17:49:42.287Z","comments":true,"path":"2020/05/20/配置好用又个性的-Windows-Terminal/","link":"","permalink":"http://yoursite.com/2020/05/20/%E9%85%8D%E7%BD%AE%E5%A5%BD%E7%94%A8%E5%8F%88%E4%B8%AA%E6%80%A7%E7%9A%84-Windows-Terminal/","excerpt":"","text":"Windows Terminal 1.0 发布了，用了一段时间的预览版，还不错，记录和分享一下它的配置了。 安装WT 项目的源码目前在 GitHub 上，地址是：https://github.com/microsoft/terminal官方推荐的安装方式是从 Microsoft Store 上安装，也可以使用 Chocolatey 安装，如果想要在不支持外网的工作PC使用，因为目前没有安装包，只能下载源码编译了，详细方法先留个坑，后面再发文介绍。 安装好以后，第一印象是：终于官方支持多标签页的终端了！然后还支持不同的入口，除了默认的 Cmd 和 Powershell，通过修改配置，还支持快速进入 WSL 和 VPS……支持设置背景和背景透明度，可以大大提升 WT 的颜值，我已经把我的 MobaXterm 给删了。 配置 / 个性化WT 的配置文件分为 4 个部门，一个是全局配置，另外 3 个分别配置 WT 的入口、主题、快捷键；下面各个介绍一下： 全局配置中常用的配置项大致就这么几个： defaultProfile: 打开 WT 后默认的入口 guid requestedTheme: 适配亮/暗主题，我是设置为 “system” 跟随系统了 copyOnSelect: 选中文字后自动复制，建议设置为 true 入口的配置： 这里分享一下我的 Powershell 的配置 12345678910111213&#123; // Make changes here to the powershell.exe profile \"guid\": \"&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;\", \"name\": \"Windows PowerShell\", \"commandline\": \"powershell.exe\", \"hidden\": false, \"fontFace\": \"Sarasa Mono T SC\", \"fontSize\":11, \"backgroundImage\":\"D:/OneDrive/Pictures/Wallpaper/winx/Untitled Goose Wallpaper.png\", \"backgroundImageStretchMode\": \"uniformToFill\", \"backgroundImageOpacity\": 0.6, \"colorScheme\":\"One Half Dark\"&#125;, 还有 VPS 的： 123456789101112&#123; \"guid\": \"&#123;a9fc51e9-101f-4548-aad9-3d9e7a934801&#125;\", \"hidden\": false, \"name\": \"Bandwagon VPS\", \"commandline\": \"powershell.exe ssh -p xxxxx root@xxx.xxx.xxx.xxx\", \"fontFace\": \"Sarasa Mono T SC\", \"fontSize\":11, \"useAcrylic\":true, \"acrylicOpacity\":1, \"icon\":\"D:\\\\OneDrive\\\\Pictures\\\\Icon\\\\icons8-centos-48.png\", \"colorScheme\":\"Gruvbox Dark\"&#125; 唯一的GUID可以通过网站在线生成 配色方案： iTerm2 的代码仓中有为 WT 配置好的配色方案，我们将方案复制到我们的配置文件中即可。 增强pshazz 我的 WT 配置","categories":[],"tags":[{"name":"Tool","slug":"Tool","permalink":"http://yoursite.com/tags/Tool/"}]},{"title":"使用Pandas处理Excel操作总结","slug":"使用Pandas处理Excel操作总结","date":"2020-05-16T14:47:35.000Z","updated":"2020-05-20T16:14:10.431Z","comments":true,"path":"2020/05/16/使用Pandas处理Excel操作总结/","link":"","permalink":"http://yoursite.com/2020/05/16/%E4%BD%BF%E7%94%A8Pandas%E5%A4%84%E7%90%86Excel%E6%93%8D%E4%BD%9C%E6%80%BB%E7%BB%93/","excerpt":"","text":"去年年底从开发岗转到维护岗后，工作中需要处理大量的 Excel 表格，由于之前做开发的时候很少接触 Excel，对于它的认知也就是会使用 SUM 这些简单的公式，VBA 更是没有接触过了，面对大量的 Excel 文档和他们动辄几万行的数据，人工处理实在是太浪费时间了，还好之前自学过一点 Python，于是便开始了自我救赎之旅。 研究了几个可以用于处理 Excel 的模块之后，我最终选择了 Pandas 和 openpyxl Pandas 主要用来处理数据，openpyxl 用于处理样式和保存文档。 这里只记录一下工作过程中经常用到的几个方法。 读取 Excel 文件读取 Excel 文件的方法是 read_excel() 123import pandas as pdfd = pd.read_excel(\"Workbook.xlsx\", \"SheetX\")print(fd) 第一个参数填写 Excel 文件的路径，第二个参数填写需要打开的标签页；第二个参数如果不填，则默认打开第一个标签页。 保存 Excel 文件保存 Excel 文件的方法方式 to_excel() 1fd.to_excel(\"Workbook_copy.xlsx\") 需要注意的是，保存的excel是不带样式的，所以我一般只用它来做测试查看结果是否符合预期，要输出可以交付的文档的时候，一般使用都是先使用 pandas 得到想要的数据，然后使用 openpyxl 保存。 另外，默认的保存方式得到的 Excel 表格是带有 index （可以理解为原始数据的行号，不过是以 0 开头）和 header （列标），如果不需要它，那么再后面加上参数 index=None 和 header=None 即可。 1fd.to_excel(\"Workbook_copy.xlsx, index=None, header=None\") 选取单元格内容使用 loc 和 iloc 方法， 他们之间的区别是 loc 是基于行标签和列标签， iloc 基于行索引和列索引。 读取一行 1fd.loc(1, :) 读取一列 12fd['列标签1'] # 通常的做法fd.loc(:, ['列标签1']) # 还可以这么做 读取一行一列 12fd.loc[3,['列标签1']] # orfd.iloc[3, 0] 读取多行多列 12fd.loc[[1, 3, 5], ['列标签1', '列标签2']] # orfd.iloc[[1, 3, 5], [0, 1]] 读取某列所有元素1vals = fd.loc('列标签').to_list() 筛选比如我们的表格中有一列的索引名称为“是否安装”，想选取值为 N 的数据： 1data_y = data[data['是否安装'] == 'N'] 使用 &amp; 和 | 可以使用更多的筛选条件，比如： 1data_y = data[(data['是否安装'] == 'Y') &amp; (data['用途'] == '效率')] 对于更复杂的筛选条件，使用 apply ，先用简单的例子来说明一下，比如还是上文的选取索引值名称为“是否安装”里面 N 的数据，如果要用 apply 方法实现的话： 1234def IsInstalled(val): return val == 'Ndata_y = data[data['是否安装'].apply(IsInstalled)] apply 可以带有参数，更为灵活 1234def IsInstalledArgs(val, is_install): return val == is_installdata_y = data[data['是否安装'].apply(IsInstalledArgs, args=('N',))] 统计123df.shape # 返回数据的行列df.count # 返回每一列中非空值的个数len(df['Column'].index.values) # 数据的条数 修改1df[3, '列标签'] = '一个新值' Pandas 还有很多方法，但以上方法对于我目前日常处理 Excel 数据的操作是够用的了，后面遇到了再补充吧。","categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"}]},{"title":"Hello World","slug":"hello-world","date":"2020-03-20T17:19:56.000Z","updated":"2020-03-23T16:16:01.334Z","comments":true,"path":"2020/03/21/hello-world/","link":"","permalink":"http://yoursite.com/2020/03/21/hello-world/","excerpt":"","text":"你好，这是我的第一篇个人博客，主要记录一些软件工程，编码的心得，还有相关工具使用方法。 12345678#include &lt;iostream&gt;using namespace std;int main()&#123; cout &lt;&lt; \"Hello,world!\" &lt;&lt; endl; return 0;&#125;","categories":[],"tags":[{"name":"misc","slug":"misc","permalink":"http://yoursite.com/tags/misc/"}]}],"categories":[],"tags":[{"name":"Tool","slug":"Tool","permalink":"http://yoursite.com/tags/Tool/"},{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"},{"name":"misc","slug":"misc","permalink":"http://yoursite.com/tags/misc/"}]}