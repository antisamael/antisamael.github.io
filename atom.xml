<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cat coding_life.log</title>
  
  <subtitle>&gt;_</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-06-30T15:48:22.869Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>antisamael</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Markdown 扩展语法</title>
    <link href="http://yoursite.com/2020/06/30/Markdown-%E6%89%A9%E5%B1%95%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursite.com/2020/06/30/Markdown-%E6%89%A9%E5%B1%95%E8%AF%AD%E6%B3%95/</id>
    <published>2020-06-29T17:32:15.000Z</published>
    <updated>2020-06-30T15:48:22.869Z</updated>
    
    <content type="html"><![CDATA[<p>Markdown 的一些很实用的扩展语法，并非所有 Markdown 编辑器都能支持，比如在笔者写这篇文章时，VSCode 还不支持上标下标但支持注脚和锚的跳转，Typora 支持上标下标但不支持注脚和锚跳转。如果都都支持，就是比较强的 Markdown 编辑器了，比如说 Joplin。</p><h2 id="高亮"><a href="#高亮" class="headerlink" title="高亮"></a>高亮</h2><p>把文本价在一对 <code>==</code> 之间就可以高亮文本了，高亮很多编辑器支持的，但它其实是扩展语法，还是有部分编辑器不支持的，比如 VSCode</p><table><thead><tr><th>Markdown 代码</th><th>Markdown 显示</th></tr></thead><tbody><tr><td><code>==需要高亮的文本==</code></td><td>==需要高亮的文本==</td></tr></tbody></table><h2 id="在表格中换行"><a href="#在表格中换行" class="headerlink" title="在表格中换行"></a>在表格中换行</h2><p>在需要换行的地方，插入 <code>&lt;br&gt;</code> 即可</p><table><thead><tr><th>Markdown 代码</th><th>Markdown 显示</th></tr></thead><tbody><tr><td><code>大道至简&lt;br&gt;知易行难</code></td><td>大道至简<br/>知易行难</td></tr></tbody></table><h2 id="上标和下标"><a href="#上标和下标" class="headerlink" title="上标和下标"></a>上标和下标</h2><table><thead><tr><th>Markdown 代码</th><th>Markdown 显示</th></tr></thead><tbody><tr><td><code>2^8^</code></td><td>2^8^</td></tr><tr><td><code>H~2~O</code></td><td>H<del>2</del>O</td></tr></tbody></table><p>有的编辑器会把下标的写法解释成删除线……比如 Jupyter，但一般来说使用一对 <code>~~</code> 夹住的文本才是删除线语法，而不应该是一对 <code>~</code>,不应该被删除才对</p><h2 id="注脚"><a href="#注脚" class="headerlink" title="注脚"></a>注脚</h2><table><thead><tr><th></th><th>Markdown 代码</th><th>Markdown 显示</th></tr></thead><tbody><tr><td>正文</td><td><code>草[^1]</code></td><td>草<a href="草：一种植物">^1</a></td></tr><tr><td>注脚</td><td><code>[^1]:草：一种植物</code></td><td>写在表格里就没有效果了，于是写在下面了</td></tr></tbody></table><p>注脚 VSCode 和 Joplin 做的很好，无论你将注脚写在正文后哪里，显示的注脚都是放在文末的，点击注脚，还能方便的跳转；</p><p>而 Typora 就不太让人满意了，要自行放在文末，还不支持跳转，但是鼠标悬浮在注脚上时，有气泡内容显示注释，如果注释文本较长的话也不太方便。</p><h2 id="锚"><a href="#锚" class="headerlink" title="锚"></a>锚</h2><p><a href="#link">跳转到页脚</a></p><h2 id="Emoji"><a href="#Emoji" class="headerlink" title="Emoji"></a>Emoji</h2><p>:smile:</p><h2 id="CheckBox"><a href="#CheckBox" class="headerlink" title="CheckBox"></a>CheckBox</h2><ul><li><input disabled="" type="checkbox"> item1</li><li><input checked="" disabled="" type="checkbox"> item2</li></ul><h2 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h2><p>$$<br>\frac{x+y}{y+z}<br>$$</p><p><a id=link>我是页脚</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Markdown 的一些很实用的扩展语法，并非所有 Markdown 编辑器都能支持，比如在笔者写这篇文章时，VSCode 还不支持上标下标但支持注脚和锚的跳转，Typora 支持上标下标但不支持注脚和锚跳转。如果都都支持，就是比较强的 Markdown 编辑器了，比如说 
      
    
    </summary>
    
    
    
      <category term="Markdown" scheme="http://yoursite.com/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Regex 速查表和常用技巧总结</title>
    <link href="http://yoursite.com/2020/06/23/Regex%E9%80%9F%E6%9F%A5%E8%A1%A8%E5%92%8C%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2020/06/23/Regex%E9%80%9F%E6%9F%A5%E8%A1%A8%E5%92%8C%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/</id>
    <published>2020-06-22T16:17:09.000Z</published>
    <updated>2020-06-29T17:07:13.293Z</updated>
    
    <content type="html"><![CDATA[<h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><table><thead><tr><th>代码</th><th>说明</th></tr></thead><tbody><tr><td>.</td><td>除换行符外任意一个字符</td></tr><tr><td>\w</td><td>匹配字母或数字或下划线或汉字</td></tr><tr><td>\s</td><td>匹配任意的空白符</td></tr><tr><td>\d</td><td>匹配数字</td></tr><tr><td>\b</td><td>匹配单词的开始或结束</td></tr><tr><td>^</td><td>匹配字符串的开始</td></tr><tr><td>$</td><td>匹配字符串的结束</td></tr></tbody></table><h2 id="限定符（指定重复）"><a href="#限定符（指定重复）" class="headerlink" title="限定符（指定重复）"></a>限定符（指定重复）</h2><p>限定符是一种特殊的元字符，用于指定它前面的表达式的重复次数</p><table><thead><tr><th>代码/语法</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>重复零次或更多次</td></tr><tr><td>+</td><td>重复一次或更多次</td></tr><tr><td>?</td><td>重复零次或一次</td></tr><tr><td>{n}</td><td>重复n次</td></tr><tr><td>{n,}</td><td>重复n次或更多次</td></tr><tr><td>{n,m}</td><td>重复n到m次</td></tr></tbody></table><h2 id="字符类（字符集合）"><a href="#字符类（字符集合）" class="headerlink" title="字符类（字符集合）"></a>字符类（字符集合）</h2><p>使用方括号 <code>[]</code> 框起来可以匹配字符的集合，比如：</p><p><code>[aeiou]</code> 匹配任何一个元音字母  </p><p>还有一些常用的有：</p><p><code>[a-b]</code><br><code>[1-9]</code><br><code>[0-26-9]</code> 匹配 0 到 2 和 6 到 9 中的任意数字  </p><h2 id="分枝条件（或）"><a href="#分枝条件（或）" class="headerlink" title="分枝条件（或）"></a>分枝条件（或）</h2><p>使用 <code>|</code> 分隔不同的表达式，满足任意一种规则都可以认为匹配</p><h2 id="反义"><a href="#反义" class="headerlink" title="反义"></a>反义</h2><p>将元字符大写或者前面加上<code>^</code>来表示反义：</p><table><thead><tr><th>代码/语法</th><th>说明</th></tr></thead><tbody><tr><td>\W</td><td>匹配任意不是字母，数字，下划线，汉字的字符</td></tr><tr><td>\S</td><td>匹配任意不是空白符的字符</td></tr><tr><td>\D</td><td>匹配任意非数字的字符</td></tr><tr><td>\B</td><td>匹配不是单词开头或结束的位置</td></tr><tr><td>[^x]</td><td>匹配除了x以外的任意字符</td></tr><tr><td>[^aeiou]</td><td>匹配除了aeiou这几个字母以外的任意字符</td></tr></tbody></table><p>例子：<br><code>&lt;a[^&gt;]+&gt;</code> 匹配用尖括号括起来的以a开头的字符串。<br><code>[^1-3]</code> 不匹配 1~3 的数字</p><h2 id="贪婪和懒惰"><a href="#贪婪和懒惰" class="headerlink" title="贪婪和懒惰"></a>贪婪和懒惰</h2><p>当表达式中带有指定重复的限定符时，如：<code>a\w+b</code> ，正则表达式默认为贪婪匹配，即匹配尽可能多的字符<br>如 <em>aabababab</em> 使用上面的表达式会匹配整个字符串。<br>如果我们只需要匹配第一次出现的符合表达式的字符串，则可以使用懒惰匹配<br>使用懒惰匹配的方法是，在限定符后面加上问号 <code>?</code>，如：<code>a\w+?b</code>，则返回的是 <em>aab</em> 和 <em>ab</em></p><h2 id="分组-子表达式"><a href="#分组-子表达式" class="headerlink" title="分组/子表达式"></a>分组/子表达式</h2><p>用小括号来指定子表达式(也叫做分组)，可以用来重复多个字符<br>比如 IP 的简单例子（这个表达式不准确，可能匹配到非法的 IP）：</p><pre><code class="regex">(\d{1,3}\.){3}\d{1,3}</code></pre><h2 id="后向引用"><a href="#后向引用" class="headerlink" title="后向引用"></a>后向引用</h2><p>指定子表达式（分组）后，每个分组为默认分配一个组号，分组0 为整个正则表达式，其他则以左括号为标志，从1开始为分组编号<br>然后使用 <code>\分组号</code> 就可以引用那个分组所捕获到的字符串了，举个例子：</p><pre><code class="regex">^My name is (\w+); Hello, \1$</code></pre><p>匹配：<em>My name is Aki; Hello, Aki</em> （Aki 可以更换为任意单词）</p><p>常用的分组语法有：</p><table><thead><tr><th>分类</th><th>代码/语法</th><th>说明</th></tr></thead><tbody><tr><td>捕获</td><td>(exp)</td><td>匹配 exp,并捕获文本到自动命名的组里</td></tr><tr><td></td><td>(?<name>exp)</td><td>匹配 exp,并捕获文本到名称为name的组里<br>也可以写成 (?’name’exp)</td></tr><tr><td></td><td>(?:exp)</td><td>匹配 exp,不捕获匹配的文本，也不给此分组分配组号</td></tr><tr><td>零宽断言</td><td>(?=exp)</td><td>零宽度正预测先行断言<br>匹配 exp 前面的位置</td></tr><tr><td></td><td>(?&lt;=exp)</td><td>零宽度正回顾后发断言<br>匹配 exp 后面的位置</td></tr><tr><td></td><td>(?!exp)</td><td>零宽度负预测先行断言<br>匹配后面跟的不是 exp 的位置</td></tr><tr><td></td><td>(?&lt;!exp)</td><td>零宽度负回顾后发断言<br>匹配前面不是 exp 的位置</td></tr><tr><td>注释</td><td>(?#comment)</td><td>提供注释让人阅读</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;元字符&quot;&gt;&lt;a href=&quot;#元字符&quot; class=&quot;headerlink&quot; title=&quot;元字符&quot;&gt;&lt;/a&gt;元字符&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;代码&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;t
      
    
    </summary>
    
    
    
      <category term="Regex" scheme="http://yoursite.com/tags/Regex/"/>
    
      <category term="正则表达式" scheme="http://yoursite.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>学渣也来刷leetcode（一）</title>
    <link href="http://yoursite.com/2020/05/23/%E5%AD%A6%E6%B8%A3%E4%B9%9F%E6%9D%A5%E5%88%B7leetcode%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2020/05/23/%E5%AD%A6%E6%B8%A3%E4%B9%9F%E6%9D%A5%E5%88%B7leetcode%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2020-05-22T16:18:07.000Z</published>
    <updated>2020-06-20T08:59:56.325Z</updated>
    
    <content type="html"><![CDATA[<p>算法还是蛮有趣的，虽然已经是个已经快要被干掉的大龄开发（转维护）了，趁着这段被放置的一点都不忙的时候，给自己找点事情做做。<br>作为一个全方面都是弱鸡，特别数学更是绝望的学渣，也来刷刷 leetcode 了。</p><p>因为对自己还是有点自知之明的，所以从 Array 的 Easy 开始刷起。</p><p>首先是最简单的第一题，<a href="https://leetcode.com/problems/two-sum/" target="_blank" rel="noopener">1.Two-Sum</a><br>就是求数组里面的元素如果相加等于9，返回数组的下标，而且限定了会出一个结果。<br>看题目真的是好简单呢，凭直觉写下了下面的代码：</p><pre><code class="cpp">class Solution {public:    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) {        vector&lt;int&gt; result(2);        for (int i = 0; i &lt; nums.size(); i++) {            int a = nums[i];            for (int j = i + 1; j &lt; nums.size(); j++) {                int b = nums[j];                if ((a + b) == target) {                    result = {i, j};                    return result;                }            }        }        return result;    }};</code></pre><p>提交，过了，后来没有然后了，直到看到了<a href="https://leetcode.com/problems/pairs-of-songs-with-total-durations-divisible-by-60/" target="_blank" rel="noopener">1010. Pairs of Songs With Total Durations Divisible by 60</a>这题……<br>这题翻译过来大致意思就是计算出将数组里面的一对数字相加后如果能被60整除的这些对的数量。<br>和 Two Sum 差不多，一眼看上去很简单，于是写了，写法和 Two Sum 差不多，两个 for 暴力怼上去算。<br>提交，失败，因为超时了……</p><p>这个时候回头看 Two Sum，才发现大O复杂度为 O(n^2^)，确实是个十分费时的算法，Two Sum 能过也只是运气好限定了只有一个结果而已吧。<br>然后看看发布后的细节：</p><blockquote><p>Runtime: 656 ms, faster than 14.84% of C++ online submissions for Two Sum.</p></blockquote><p>确实是很慢呢……</p><p>先弄到复杂度 O(n) 把！用空间换时间，把索引存到 map 里面去然后直接去找，于是改写一下……</p><pre><code class="cpp">class Solution{public:    vector&lt;int&gt; twoSum(vector&lt;int&gt; &amp;nums, int target)    {        vector&lt;int&gt; result;        map&lt;int, int&gt; val_index;        for (size_t i = 0; i &lt; nums.size(); i++) {            val_index[nums[i]] = i;        }        map&lt;int, int&gt;::iterator it;        for (size_t i = 0; i &lt; nums.size(); i++) {            int other_num =  target - nums[i];            it = val_index.find(other_num);            if ((it != val_index.end()) &amp;&amp; (it-&gt;second != i)) {                result.push_back(i);                result.push_back(it-&gt;second);                return result;            }        }        return result;    }};</code></pre><p>这应该是最普通的思路了，虽然时间快了不少，空间真是占了好大了。而且这个算法不是最快的……</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;算法还是蛮有趣的，虽然已经是个已经快要被干掉的大龄开发（转维护）了，趁着这段被放置的一点都不忙的时候，给自己找点事情做做。&lt;br&gt;作为一个全方面都是弱鸡，特别数学更是绝望的学渣，也来刷刷 leetcode 了。&lt;/p&gt;
&lt;p&gt;因为对自己还是有点自知之明的，所以从 Array
      
    
    </summary>
    
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>配置好用又个性的 Windows Terminal</title>
    <link href="http://yoursite.com/2020/05/20/%E9%85%8D%E7%BD%AE%E5%A5%BD%E7%94%A8%E5%8F%88%E4%B8%AA%E6%80%A7%E7%9A%84-Windows-Terminal/"/>
    <id>http://yoursite.com/2020/05/20/%E9%85%8D%E7%BD%AE%E5%A5%BD%E7%94%A8%E5%8F%88%E4%B8%AA%E6%80%A7%E7%9A%84-Windows-Terminal/</id>
    <published>2020-05-20T15:58:55.000Z</published>
    <updated>2020-05-22T19:03:44.486Z</updated>
    
    <content type="html"><![CDATA[<p>Windows Terminal 1.0 发布了，用了一段时间的预览版，还不错，记录和分享一下它的配置了。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>WT 项目的源码目前在 GitHub 上，地址是：<a href="https://github.com/microsoft/terminal" target="_blank" rel="noopener">https://github.com/microsoft/terminal</a><br>官方推荐的安装方式是从 Microsoft Store 上安装，也可以使用 Chocolatey 安装，如果想要在不支持外网的工作PC使用，因为目前没有安装包，只能下载源码编译了，详细方法先留个坑，后面再发文介绍。</p><p>安装好以后，第一印象是：终于官方支持多标签页的终端了！<br>然后还支持不同的入口，除了默认的 Cmd 和 Powershell，通过修改配置，还支持快速进入 WSL 和 VPS……<br>支持设置背景和背景透明度，可以大大提升 WT 的颜值，作为非运维人员也不需要太多功能，所以我已经把 MobaXterm 和 XShell 给丢冷板凳了。</p><h2 id="配置-个性化"><a href="#配置-个性化" class="headerlink" title="配置 / 个性化"></a>配置 / 个性化</h2><p>按 <kbd>Ctrl</kbd> + <kbd>,</kbd> 打开WT的配置文件，WT 的配置文件是由json编写的，分为 4 个分，一个是全局配置，另外 3 个分别配置 WT 的入口、主题、快捷键；<br>下面各个介绍一下：</p><p>全局配置中常用的配置项大致就这么几个：</p><ul><li>defaultProfile: 打开 WT 后默认的入口 guid</li><li>requestedTheme: 适配亮/暗主题，我是设置为 “system” 跟随系统了</li><li>copyOnSelect: 选中文字后自动复制，建议设置为 true</li></ul><p>入口的配置：</p><p>这里分享一下我的 Powershell 的配置</p><pre><code class="json">{    // Make changes here to the powershell.exe profile    &quot;guid&quot;: &quot;{61c54bbd-c2c6-5271-96e7-009a87ff44bf}&quot;,    &quot;name&quot;: &quot;Windows PowerShell&quot;,    &quot;commandline&quot;: &quot;powershell.exe&quot;,    &quot;hidden&quot;: false,    &quot;fontFace&quot;: &quot;Sarasa Mono T SC&quot;,    &quot;fontSize&quot;:11,    &quot;backgroundImage&quot;:&quot;D:/OneDrive/Pictures/Wallpaper/winx/Untitled Goose Wallpaper.png&quot;,    &quot;backgroundImageStretchMode&quot;: &quot;uniformToFill&quot;,    &quot;backgroundImageOpacity&quot;: 0.6,    &quot;colorScheme&quot;:&quot;One Half Dark&quot;},</code></pre><p>还有 VPS 的：</p><pre><code class="json">{    &quot;guid&quot;: &quot;{a9fc51e9-101f-4548-aad9-3d9e7a934801}&quot;,    &quot;hidden&quot;: false,    &quot;name&quot;: &quot;Bandwagon VPS&quot;,    &quot;commandline&quot;: &quot;powershell.exe ssh -p xxxxx root@xxx.xxx.xxx.xxx&quot;,    &quot;fontFace&quot;: &quot;Sarasa Mono T SC&quot;,    &quot;fontSize&quot;:11,    &quot;useAcrylic&quot;:true,    &quot;acrylicOpacity&quot;:1,    &quot;icon&quot;:&quot;D:\\OneDrive\\Pictures\\Icon\\icons8-centos-48.png&quot;,    &quot;colorScheme&quot;:&quot;Gruvbox Dark&quot;}</code></pre><p>唯一的GUID可以通过网站<a href="https://www.uuidgenerator.net/" target="_blank" rel="noopener">在线生成</a></p><p>配色方案：</p><p><a href="https://github.com/mbadolato/iTerm2-Color-Schemes" target="_blank" rel="noopener">iTerm2</a> 的代码仓中有为 WT 配置好的配色方案，我们将方案复制到我们的配置文件中即可。</p><h2 id="增强"><a href="#增强" class="headerlink" title="增强"></a>增强</h2><p>pshazz</p><h2 id="我的-WT-配置"><a href="#我的-WT-配置" class="headerlink" title="我的 WT 配置"></a>我的 WT 配置</h2><!-- Get UTF-8 Size (ANSI C) --><!-- Begin --><script src="https://gist.github.com/antisamael/46fb0d30a828721c060205c98aacf299.js"></script><!-- End -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Windows Terminal 1.0 发布了，用了一段时间的预览版，还不错，记录和分享一下它的配置了。&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;WT 项目的源码目
      
    
    </summary>
    
    
    
      <category term="Tool" scheme="http://yoursite.com/tags/Tool/"/>
    
  </entry>
  
  <entry>
    <title>使用Pandas处理Excel的常用操作</title>
    <link href="http://yoursite.com/2020/05/16/%E4%BD%BF%E7%94%A8Pandas%E5%A4%84%E7%90%86Excel%E7%9A%84%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2020/05/16/%E4%BD%BF%E7%94%A8Pandas%E5%A4%84%E7%90%86Excel%E7%9A%84%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</id>
    <published>2020-05-16T14:47:35.000Z</published>
    <updated>2020-06-29T17:54:49.478Z</updated>
    
    <content type="html"><![CDATA[<h2 id="读取-Excel-文件"><a href="#读取-Excel-文件" class="headerlink" title="读取 Excel 文件"></a>读取 Excel 文件</h2><p>读取 Excel 文件的方法是 <code>read_excel()</code></p><pre><code class="python">import pandas as pdfd = pd.read_excel(&#39;Workbook.xlsx&#39;)print(fd)</code></pre><p>第一个参数填写 Excel 文件的路径，第二个参数填写需要打开的标签页；第二个参数如果不填，则默认打开第一个标签页；<br>下面的脚本是读取 Sheet2 标签页。</p><pre><code class="python">fd = pd.read_excel(&#39;Workbook.xlsx&#39;, &#39;Sheet2&#39;)</code></pre><h2 id="保存-Excel-文件"><a href="#保存-Excel-文件" class="headerlink" title="保存 Excel 文件"></a>保存 Excel 文件</h2><p>保存 Excel 文件的方法方式 <code>to_excel()</code></p><pre><code class="python">fd.to_excel(&quot;Workbook_copy.xlsx&quot;)</code></pre><p>需要注意的是，保存的excel是不带样式的，所以我一般只用它来做测试查看结果是否符合预期，要输出可以交付的文档的时候，一般使用都是先使用 pandas 得到想要的结果后，再使用 openpyxl 保存。</p><p>默认的保存方式得到的 Excel 表格是带有 index （可以简单理解为原始数据的行号，不过是以 0 开头）和 header （可以理解为列标题），如果不需要它们，将参数 <code>index</code> 和 <code>header</code> 设置为 <code>False</code> 即可；</p><p>保存后默认标签页名称是 「Sheet1」，可以使用 <code>sheet_name</code> 参数来指定标签页名称；</p><p>对于 NaN 数据，默认是使用空字符串来保存的，如果需要修改为其他字符串，如 「–」，可以使用 <code>na_rep</code> 来修改。</p><pre><code class="python">fd.to_excel(&#39;Workbook_copy.xlsx&#39;, sheet_name=&quot;foo&quot;, index=None,            header=None, na_rep=&#39;--&#39;)</code></pre><h2 id="读取单元格内容"><a href="#读取单元格内容" class="headerlink" title="读取单元格内容"></a>读取单元格内容</h2><p>使用 <code>loc</code> 和 <code>iloc</code> 方法可以得到单元格的内容， <code>loc</code> 是基于列标签（或者说列标题）， <code>iloc</code> 基于列索引（表示从 0 开始数的第几列）。</p><p>比如如下代码读取第 3 行第 1 列的单元格内容</p><pre><code class="python">fd.loc[3,[&#39;列1&#39;]]  # orfd.iloc[3, 0]</code></pre><p>读取一行所有内容,并将值以 list 的形式返回</p><pre><code class="python">fd.loc(1, :).to_list()  # loc 改成 iloc 也行</code></pre><p>读取一列所有内容,并将值以 list 的形式返回</p><pre><code class="python">fd[&#39;列1&#39;].to_list()  # 通常的做法fd.loc(:, [&#39;列1&#39;]).to_list()  # 也可以这么做fd.iloc(:, 0).to_list()  # iloc 方法</code></pre><p>读取多行多列</p><pre><code class="python">fd.loc[[1, 3, 5], [&#39;列1&#39;, &#39;列2&#39;]]  # orfd.iloc[[1, 3, 5], [0, 1]]</code></pre><h2 id="列的连接"><a href="#列的连接" class="headerlink" title="列的连接"></a>列的连接</h2><p>将 A 列的值和 B 列 的值连接起来合成一个新列：</p><pre><code class="python">fd[&#39;A&amp;B&#39;] = fd[&#39;A&#39;].map(str) + fd[&#39;B&#39;].map(str)</code></pre><h2 id="筛选"><a href="#筛选" class="headerlink" title="筛选"></a>筛选</h2><p>比如我们的表格中有一列的索引名称为 「是否安装」，想选取值为 N 的数据：</p><pre><code class="python">data_y = data[data[&#39;是否安装&#39;] == &#39;N&#39;]</code></pre><p>使用 <code>&amp;</code> 和 <code>|</code> 可以使用更多的筛选条件，比如：</p><pre><code class="python">data_y = data[(data[&#39;是否安装&#39;] == &#39;Y&#39;) &amp; (data[&#39;用途&#39;] == &#39;效率&#39;)]</code></pre><p>对于更复杂的筛选条件，使用 <code>apply</code> ，先用简单的例子来说明一下，还是选取列标题「是否安装」为 N 的数据，用 <code>apply</code> 来实现的话：</p><pre><code class="python">def IsInstalled(val):    return val == &#39;Ndata_y = data[data[&#39;是否安装&#39;].apply(IsInstalled)]</code></pre><p><code>apply</code> 可以带有参数，更为灵活：</p><pre><code class="python">def IsInstalledArgs(val, is_install):    return val == is_installdata_y = data[data[&#39;是否安装&#39;].apply(IsInstalledArgs, args=(&#39;N&#39;,))]</code></pre><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><p>直接修改单元格的内容</p><pre><code class="python">df.loc[3, &#39;列标签&#39;] = &#39;一个新值&#39;</code></pre><p>修改列标题</p><pre><code class="python">df.rename(columns={&#39;A&#39;:&#39;AA&#39;,&#39;B&#39;:&#39;BB&#39;}, inplace=True)</code></pre><h2 id="合并-DataFrame"><a href="#合并-DataFrame" class="headerlink" title="合并 DataFrame"></a>合并 DataFrame</h2><p>使用 <code>concat</code> 简单的将 DataFrame 拼接到一起，不处理重复数据：</p><pre><code class="python">df = pd.concat([df_A, df_B], axis=1)</code></pre><p>axis 为 0 是表示行拼接，为 1 时表示列拼接。</p><p>使用 <code>merge</code> 可以将 DataFrame 合并到一起，用它可以实现 Excel 的 VLOOKUP，比如：以 index 为 key，在 df1 中 查找 df2 的 name 的值合并。</p><p>等价于 <code>VLOOKUP(index, df1:df2, 2, 0)</code></p><pre><code class="python">result = pd.merge(df1, df2.loc[:,[&#39;index&#39;,&#39;name&#39;]], how=&#39;left&#39;, on = &#39;index&#39;)</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;读取-Excel-文件&quot;&gt;&lt;a href=&quot;#读取-Excel-文件&quot; class=&quot;headerlink&quot; title=&quot;读取 Excel 文件&quot;&gt;&lt;/a&gt;读取 Excel 文件&lt;/h2&gt;&lt;p&gt;读取 Excel 文件的方法是 &lt;code&gt;read_excel()
      
    
    </summary>
    
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Pandas" scheme="http://yoursite.com/tags/Pandas/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/03/21/hello-world/"/>
    <id>http://yoursite.com/2020/03/21/hello-world/</id>
    <published>2020-03-20T17:19:56.000Z</published>
    <updated>2020-03-23T16:16:01.334Z</updated>
    
    <content type="html"><![CDATA[<p>你好，这是我的第一篇个人博客，主要记录一些软件工程，编码的心得，还有相关工具使用方法。</p><pre><code class="cpp">#include &lt;iostream&gt;using namespace std;int main(){    cout &lt;&lt; &quot;Hello,world!&quot; &lt;&lt; endl;    return 0;}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;你好，这是我的第一篇个人博客，主要记录一些软件工程，编码的心得，还有相关工具使用方法。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;cpp&quot;&gt;#include &amp;lt;iostream&amp;gt;
using namespace std;

int main()
{
    c
      
    
    </summary>
    
    
    
      <category term="misc" scheme="http://yoursite.com/tags/misc/"/>
    
  </entry>
  
</feed>
